
-   hosts:                  localhost
    gather_facts:           false
    vars:
      ansibleCrendential:
        organizationName:   Default
        ansibleServer:
          url:              https://3.252.89.208:8043/
        credentialName:     CredencialDePrueba
        userName:           usuario
        becomeUserName:     usuarioEscalado

      ansibleCrendentialAnsibleServerToken:         gZUmWHAQshS2AuNhziixdbg0uuMQPR
      ansibleCrendentialUserPassword:               ~
      ansibleCrendentialBecomeUserPassword:         superPasswordDelSiglo
      ansibleCrendentialUserPrivateSSHKey:          "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABBjfXlX9Hdc1WZp\n5jP7WN0FAAAAEAAAAAEAAACXAAAAB3NzaC1yc2EAAAADAQABAAAAgQC/gcWQhrACU2i2e7X3xeA2\no54t6IZ1giI9FbOFaw8whXIlTUz2CSwxux5WYfCUUFWx8TWo9B/zG0zCDNc60RhcKRcff8lUAa08\nJb3MCgf8F3XO8GH0FvTQFf4okhCt7QpJJn6Mim+sBLCt7bRc4O7Smg3Sdr0jK6bHy2Cj5ygyjQAA\nAgCyqyZLTAUFVYANyYNwrGIOPE1DwGy1pWQErzW9xLTwlYIy1VBMbtoiW+asW9tPXqTcsPQ/ROJZ\n7aqiXBR8FhPNlepy83P/MwwfnKWheew663QdbaAXagWYENjN1HSiXRjQV76Ebqk91DJxgeNl3rlM\ntNPvT0cumwT4gWcqcSyKNhb3KjbXZZdWuHl8ghLypsoAFIpJ2nxxO2ygxNvTd/ove79i50z8Gqps\nQPr7Njw821ljK3bdK5HnbXJ7pjt1hGQwpSbDc8pbCN8MjMN1cCcIn1oUSV7mSjMyty/W97eLtpu+\nRHYzs5WkrCVPHx3IBpuCyy1/iiszceRPRGfhFspaFgctZ3Q0ZjfN2B7xagriFP5/FbBQalw+hhhw\netf76GDMAjsqr6TYpjUKkfVuNCD/U+gnHwFDLyCGs4FcGO2Ck8sJNCJmLcLW37ndfjaHWABZ4ibE\nmj56R6oUr2AXC6/xBEnofgZPhYoX+cOHMfOi0LIzwLOZdYSa4RUwUOTGFB7ZEdjnNY+CRoJtkOw4\n532WQzQ/2TQt/x+YhVhwTUyHN8H1bWZ1ZNGZp4YByGUOGJO1tyZnci+bFVuuiwvJhmLmRjVYMdxy\nZX4i4SZ6eaoSltapIvssLK6jSy3GAsDrSN4sHX3l+hBnST7wyUCy9DcCZWILxv2To8S4EcieRS7C\nVQ==\n-----END OPENSSH PRIVATE KEY-----"
      ansibleCrendentialUserPrivateSSHKeyPassphrase: MiPassPhraseSuperSecreto

    pre_tasks:
    - name:                   Validar los datos de entrada
      block:
        - name:               Comprobar que me han dado usuario
          ansible.builtin.assert:
            that:
              -               ansibleCrendential.userName is defined
              -               ansibleCrendential.userName != ""
            fail_msg:           El nombre de usuario no puede estar vacío
            quiet:              true # No genere log
        - name:               Comprobar que me han dado contraseña o me han dado una clave privada
          ansible.builtin.assert:
            that:
              -               ansibleCrendentialUserPassword is defined or ansibleCrendentialUserPrivateSSHKey is defined
              -               ansibleCrendentialUserPassword != "" or ansibleCrendentialUserPrivateSSHKey != ""
            fail_msg:           Debe suministrarse una contraseña o una clave privada
            quiet:              true # No genere log
        - name:               Comprobar que me han dado usuario de escalado, que tenga también su contraseña
          ansible.builtin.assert:
            that:
              -               ansibleCrendential.becomeUserName is defined
              -               ansibleCrendential.becomeUserName != ""
            fail_msg:           El nombre de usuario de escalado no puede estar vacío
            quiet:              true # No genere log
        - name:               Comprobar que me han dado servidor
          ansible.builtin.assert:
            that:
              -               ansibleCrendential.ansibleServer.url is defined
              -               ansibleCrendential.ansibleServer.url != ""
            fail_msg:           La URL del servidor no puede estar vacía
            quiet:              true # No genere log
        - name:               Comprobar que el servidor es válido
          ansible.builtin.uri:
            url:                "{{ ansibleCrendential.ansibleServer.url }}/"
            method:             GET
            status_code:        200
            return_content:     true
            validate_certs:     false
        - name:               Comprobar que me han dado token
          ansible.builtin.assert:
            that:
              -               ansibleCrendentialAnsibleServerToken is defined
              -               ansibleCrendentialAnsibleServerToken != ""
            fail_msg:           El token no puede estar vacío
            quiet:              true # No genere log

        - name:               Comprobar que el token es válido
          ansible.builtin.uri:
            url:                "{{ ansibleCrendential.ansibleServer.url }}/api/v2/organizations/"
            method:             GET
            status_code:        200
            return_content:     true
            validate_certs:     false
            headers:
              Authorization:     "Bearer {{ ansibleCrendentialAnsibleServerToken }}"
        - name:               Comprobar que me han dado nombre de credential
          ansible.builtin.assert:
            that:
              -               ansibleCrendential.credentialName is defined
              -               ansibleCrendential.credentialName != ""
            fail_msg:           El nombre de la credential no puede estar vacío
            quiet:              true # No genere log
        - name:               Comprobar que me han dado nombre de organización
          ansible.builtin.assert:
            that:
              -               ansibleCrendential.organizationName is defined
              -               ansibleCrendential.organizationName != ""
            fail_msg:           El nombre de la organización no puede estar vacío
            quiet:              true # No genere log

    - name:                   Obtener el id de la organization para dar de alta la credential
      block:                            
        - name:               Llamar a la API de Ansible para obtener esa organización
          ansible.builtin.uri:
            url:                "{{ ansibleCrendential.ansibleServer.url }}/api/v2/organizations/?search={{ ansibleCrendential.organizationName }}"
            method:             GET
            status_code:        200
            return_content:     true
            validate_certs:     false
            headers:
              Authorization:     "Bearer {{ ansibleCrendentialAnsibleServerToken }}"
          register:           resultado_organizacion
        - name:               Comprobar que la organización existe y es única
          ansible.builtin.assert:
            that:
              -               (resultado_organizacion.content|from_json).count == 1
            fail_msg:           La organización no existe o no es única
            quiet:              true # No genere log
        - name:               Sacar de la respuesta el id de la organización
          set_fact:
            organizationId:     "{{ (resultado_organizacion.content|from_json).results[0].id }}"  

    - name:                   Verificar si la credential ya existe
      block: 
        - name:               Llamar a la API de Ansible para obtener esa credential
          ansible.builtin.uri:
            url:                "{{ ansibleCrendential.ansibleServer.url }}/api/v2/credentials/?search={{ ansibleCrendential.credentialName }}"
            method:             GET
            status_code:        200
            return_content:     true
            validate_certs:     false
            headers:
              Authorization:     "Bearer {{ ansibleCrendentialAnsibleServerToken }}"
          failed_when:        false
          register:           resultado_credential
        - name:               Crear una variable para indicar si existe ya la organization
          ansible.builtin.set_fact:
            credentialExists:   "{{ (resultado_credential.status== 200) and (resultado_credential.content|from_json).count == 1 }}"
        - name:               Comprobar que si existe la credencial, que sea única
          ansible.builtin.assert:
            that:
              -               (resultado_credential.content|from_json).count <= 1
            fail_msg:           La credencial no existe o no es única
            quiet:              true # No genere log

    #- name:                   Si existe se modifica... No estamos respetando idempotencia
    - name:                   Si no existe se crea
      ansible.builtin.uri:
            url:                "{{ ansibleCrendential.ansibleServer.url }}/api/v2/credentials/"
            method:             POST
            status_code:        201
            return_content:     true
            validate_certs:     false
            headers:
              Authorization:     "Bearer {{ ansibleCrendentialAnsibleServerToken }}"
              Content-Type:      "application/json"
            body_format:        json
            body:
              name:              "{{ ansibleCrendential.credentialName }}"
              description:       "Credential de prueba"
              organization:      "{{ organizationId }}"
              credential_type:   1
              inputs:
                username:        "{{ ansibleCrendential.userName }}"
                password:        "{{ ansibleCrendentialUserPassword }}"
                become_username: "{{ ansibleCrendential.becomeUserName }}"
                become_password: "{{ ansibleCrendentialBecomeUserPassword }}"
                ssh_key_data:    "{{ ansibleCrendentialUserPrivateSSHKey }}"
                ssh_key_unlock:  "{{ ansibleCrendentialUserPrivateSSHKeyPassphrase }}"
      when:
        - credentialExists == false
