
-   hosts: localhost
    gather_facts: false
  
    vars:

      pythonDependencies:
        - bcrypt
        - cryptography

      osDependencies:
        - openssh
        - ssh-keygen
        

      validAlgorithms:
        rsa:
            - 1024
            - 2048
            - 4096
        dsa:
            - 1024
        ecdsa:
            - 256
            - 384
            - 521
        ed25519: ~

      defaultSshKeyPairsSettings: # Los proveo YO en el playbook
            algorithm:
              name: rsa
              size: 2048
            regenerate: false
            passphrase: ~
            files:
              path:  ~/.ssh/keypairs
              privateKeyName: id_rsa
              publicKeyName:  id_rsa.pub

      sshKeyPairs:
        defaultSettings: # Estos los provee el usuario
            algorithm:
              name: rsa
              size: 1024
            regenerate: false
            passphrase: MiPassPhraseSuperSecreto
            files:
              path:  ~/.ssh/keypairs
              privateKeyName: id_rsa
              publicKeyName:  id_rsa.pub
        keyPairs: # Los settings del usuario (con mis valores por defecto) se aplican sobre cada par de claves a generar
        - files:
            path:  ~/.ssh/keypairs/produccion
          algorithm:
              name: ecdsa
              size: 521
        - files:
            path:  ~/.ssh/keypairs/desarrollo
            regenerate: true
        - files:
            path:  ~/.ssh/keypairs/bbdd
            privateKeyName: bbddPrivate
            publicKeyName:  bbddPublic
        - files:
            path:  ~/.ssh/keypairs/pre

    pre_tasks:

      - name:                 Asegurar las dependencias de módulos de python
        pip:
          name:               "{{ item }}"
          state:              present
        loop:                 "{{ pythonDependencies }}"

      - name:                 Calcular los valores por defecto de las claves ssh que hay que generar
        set_fact:
          defaultSettings: |
                              {{ defaultSshKeyPairsSettings | combine((sshKeyPairs| default({})).defaultSettings | default({}), recursive = true) }}

      - name:                 Aplicar los valores por defecto sobre cada keypair que haya que generar 
        set_fact:
          paresDeClaves: |
                             {{ paresDeClaves | default([]) + [parDeClaves] }}
        vars:
          parDeClaves:      "{{ defaultSettings | combine(item, recursive = true) }}"
        loop:               "{{ (sshKeyPairs| default({})).keyPairs | default([]) }}"

      - name:                Validar los datos suministrados para cada par de claves
        assert:
          that:
                          -  algoritmo in validAlgorithms
                          -  (true if validAlgorithms[algoritmo] is none else item.algorithm.size in validAlgorithms[algoritmo])
        vars:
          algoritmo:         "{{ item.algorithm.name | lower }}"
        loop:                "{{ paresDeClaves }}"

      - name:                Asegurar que existe el directorio para almacenar las claves
        file:
          path:              "{{ item.files.path }}"
          state:             directory
        loop:                "{{ paresDeClaves }}"

      - name:                Generar las claves 

        block:
          - name:            Generar un UUID
            set_fact:
              paresDeClavesConUUID: |    
                             {{ paresDeClavesConUUID | default([]) + [{'uuid': uuid, 'info': item}] }}
            vars: 
              uuid:         "{{ (item.files.path +'/'+ item.files.privateKeyName) | to_uuid }}"
            loop:           "{{ paresDeClaves }}"

          - name:            Asegurar que no hay datos anteriores
            file:
              path:          "/tmp/{{ item.uuid }}"
              state:         absent
            changed_when:    false
            loop:            "{{ paresDeClavesConUUID }}"

          - name:            Asegurar que hay una carpeta temporal para ese UUID
            file:
              path:          "/tmp/{{ item.uuid }}"
              state:         directory
            changed_when:    false
            loop:            "{{ paresDeClavesConUUID }}"


          - name:            Copiar las existentes (si las hay) a la carpeta temporal
            copy:
              remote_src:    true
              src:           "{{ item.info.files.path }}/{{ item.info.files.privateKeyName }}"
              dest:          "/tmp/{{ item.uuid }}/{{ item.uuid }}"
            failed_when:     false
            changed_when:    false
            loop:            "{{ paresDeClavesConUUID }}"

          - name:            Copiar las existentes (si las hay) a la carpeta temporal
            copy:
              remote_src:    true
              src:           "{{ item.info.files.path }}/{{ item.info.files.publicKeyName }}"
              dest:          "/tmp/{{ item.uuid }}/{{ item.uuid }}.pub"
            failed_when:     false
            changed_when:    false
            loop:            "{{ paresDeClavesConUUID }}"

          - name:            (Re)generamos las claves, caso de ser necesario
            community.crypto.openssh_keypair:
              path:          "/tmp/{{ item.uuid }}/{{ item.uuid }}"
              type:          "{{ item.info.algorithm.name }}"
              size:          "{{ item.info.algorithm.size }}"
              regenerate:    "{{ 'always' if item.info.regenerate else 'never' }}"
              passphrase:    "{{ item.info.passphrase }}"
            changed_when:    false
            loop:            "{{ paresDeClavesConUUID }}"
            register:        resultado
            async:           60
            poll:            0

          - name:            Esperar a que se completen todas las tareas asíncronas
            async_status:
              jid:            "{{ item.ansible_job_id }}"
            register:         async_status_result
            until:            async_status_result.finished
            retries:          10
            delay:            3
            changed_when:     false
            loop:             "{{ resultado.results }}"

          - debug:
               var: async_status_result

          - name:            Copiar las claves privadas generadas a su destino
            copy:
              remote_src:    true
              src:           "{{ item.filename }}"
              dest:          "{{ item.item.item.info.files.path }}/{{ item.item.item.info.files.privateKeyName }}"
              force:         true
            loop:            "{{ async_status_result.results }}"

          - name:            Copiar las claves publicas generadas a su destino
            copy:
              remote_src:    true
              src:           "{{ item.filename }}.pub"
              dest:          "{{ item.item.item.info.files.path }}/{{ item.item.item.info.files.publicKeyName }}"
              force:         true
            loop:            "{{ async_status_result.results }}"


          - name:            Borrar los directorios temporales
            file:
              path:          "/tmp/{{ item.item.item.uuid }}"
              state:         absent
            changed_when:    false
            loop:            "{{ async_status_result.results }}"

